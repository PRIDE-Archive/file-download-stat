includeConfig 'conf/base.config'
includeConfig 'params.config'

profiles {
  local {
    process.conda = "$baseDir/environment.yml"
    docker.enabled = false
    singularity.enabled = false
    trace.enabled = false
  }
  ebislurm {
    executor {
            name = "slurm"
            queueSize = 1000
            submitRateLimit = "10/1sec"
            exitReadTimeout = "30 min"
            jobName = {
                "NF-$task.name-$task.hash" // [] and " " not allowed in lsf job names
                .replace("[", "(")
                .replace("]", ")")
                .replace(" ", "_")
            }
         }
    conda.enable = true
    docker.enabled = false
    singularity.enabled = false
    trace.enabled = false
    process {
      queue = 'datamover'
      conda = "$baseDir/environment.yml"
      memory = '10 GB'
      time = '24h'
      withName: process_log_file {
        echo = true   // Logs process execution
        trace = true  // Enables trace logging
    }
    }
  }
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}